services:
  rabbitmq:
    image: docker.io/rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - default
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: on-failure

  minio:
    image: quay.io/minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_OPTS: '--console-address=":9001"'
    entrypoint: /usr/bin/sh
    # workaround to initialise a bucket
    command: -c 'mkdir -p /data/worker && /usr/bin/minio server --console-address ":9001" /data'
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - default
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5

  cc-idx-downloader:
    image: docker.io/curlimages/curl:latest
    environment:
      CC_COLLECTION: CC-MAIN-2024-30
    entrypoint: /bin/sh
    command: -c "curl -O --create-dirs --output-dir /shared/$${CC_COLLECTION} -z /shared/$${CC_COLLECTION}/cluster.idx  https://data.commoncrawl.org/cc-index/collections/$${CC_COLLECTION}/indexes/cluster.idx"
    volumes:
      - shared-data:/shared
    restart: on-failure

  autometrics:
    image: docker.io/autometrics/am:latest
    environment:
      LISTEN_ADDRESS: 0.0.0.0:6789
    command: --verbose start http://batcher:9000/ http://worker:9001/
    ports:
      - "6789:6789"
      - "9090:9090"
    depends_on:
      batcher:
        condition: service_healthy
      worker:
        condition: service_healthy
    networks:
      - default

  batcher:
    build:
      context: ./
      dockerfile: Containerfile
    environment:
      RABBITMQ_CONNECTION_STRING: "amqp://guest:guest@rabbitmq:5672"
      CC_COLLECTION: CC-MAIN-2024-30
    entrypoint: /bin/sh
    command: -c "python batcher.py --cluster-idx-filename /shared/$${CC_COLLECTION}/cluster.idx"
    depends_on:
      cc-idx-downloader:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    volumes:
      - shared-data:/shared
    expose:
      - 9000
    networks:
      - default
    healthcheck:
      test: curl -f http://127.0.0.1:9000/metrics || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    restart: on-failure

  worker:
    build:
      context: ./
      dockerfile: Containerfile
    environment:
      RABBITMQ_CONNECTION_STRING: "amqp://guest:guest@rabbitmq:5672"
      AWS_S3_HOST: minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      S3_BUCKET_NAME: worker
      CC_COLLECTION: CC-MAIN-2024-30
    command: [ "python", "worker.py" ]
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    expose:
      - 9001
    networks:
      - default
    healthcheck:
      test: curl -f http://127.0.0.1:9001/metrics || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    restart: on-failure

volumes:
  shared-data:

networks:
  default:
    driver: bridge
